version: 3
silent: false
vars:
  GoVersion: 1.22.1
  OutputName: "cheetah-$GOOS-$GOARCH$BINARY_FILE_EXT"
  LinkerFlags: "-w -s"
  BuildCommand: "go build -ldflags='{{.LinkerFlags}}' -o build/cheetah-$GOOS-$GOARCH$BINARY_FILE_EXT ./cmd/cheetah"
  TempDir: "/tmp/solo-cheetah"
  TempDataDir: "/tmp/solo-cheetah/data"
  TempBackupDir: "/tmp/solo-cheetah/data/backup"
  TempConfigDir: "/tmp/solo-cheetah/config"
  TempLogsDir: "/tmp/solo-cheetah/logs"
  TempStatsDir: "/tmp/solo-cheetah/stats"
  TempRecordStreamsDir: "/tmp/solo-cheetah/data/hgcapp/recordStreams"
  TempEventsStreamsDir: "/tmp/solo-cheetah/data/hgcapp/eventsStreams"
  TempBackupRecordStreamsDir: "/tmp/solo-cheetah/data/backup/recordStreams"
  TempBackupEventsStreamsDir: "/tmp/solo-cheetah/data/backup/eventsStreams"
tasks:
  clean:
    cmds:
      - "rm -rf build"
      - "rm -f unit-test-report.md"
      - "mkdir -p build"
      - "go clean -cache -testcache"

  vendor:
    cmds:
      - "go mod vendor"

  lint:
    cmds:
      - "go fmt -x ./..."

  lint:check:
    cmds:
      - "R=$(go fmt ./...) && if [[ -n \"$R\" ]]; then echo \"The following files require formatting:\"; echo \"$R\"; exit 1; fi"

  build:
    deps:
      - "vendor"
    cmds:
      - task: "build:cheetah:linux:amd64"
      - task: "build:cheetah:linux:arm64"
      - task: "build:cheetah:darwin:amd64"
      - task: "build:cheetah:darwin:arm64"
      - task: "build:permissions"

  build:image:
    cmds:
      - "docker build -t solo-cheetah ."

  run:image:
    cmds:
      - "mkdir -p {{.TempDir}}"
      - "mkdir -p {{.TempDataDir}}"
      - "mkdir -p {{.TempBackupDir}}"
      - "mkdir -p {{.TempConfigDir}}"
      - "mkdir -p {{.TempLogsDir}}"
      - "mkdir -p {{.TempStatsDir}}"
      - "mkdir -p {{.TempRecordStreamsDir}}"
      - "mkdir -p {{.TempEventsStreamsDir}}"
      - "time docker run -it \
      -v $(PWD)/test/config:/app/config \
      -v {{.TempDataDir}}:/app/data \
      -v {{.TempLogsDir}}:/app/logs \
      -v {{.TempStatsDir}}:/app/stats \
      -p 6060:6060 \
      solo-cheetah upload --config /app/config/.cheetah/cheetah-container.yaml"

  run:image-once:
    cmds:
      - "mkdir -p {{.TempDir}}"
      - "mkdir -p {{.TempDataDir}}"
      - "mkdir -p {{.TempBackupDir}}"
      - "mkdir -p {{.TempConfigDir}}"
      - "mkdir -p {{.TempLogsDir}}"
      - "mkdir -p {{.TempStatsDir}}"
      - "mkdir -p {{.TempRecordStreamsDir}}"
      - "mkdir -p {{.TempEventsStreamsDir}}"
      - "time docker run -it \
      -v $(PWD)/test/config:/app/config \ 
      -v {{.TempDataDir}}:/app/data \
      -v {{.TempLogsDir}}:/app/logs \
      -v {{.TempStatsDir}}:/app/stats \
      -p 6060:6060 \
      solo-cheetah upload --config /app/config/.cheetah/cheetah-container.yaml --poll=false"

  run:gen-record-streams: # for testing
    cmds:
      - "mkdir -p {{.TempRecordStreamsDir}}"
      - "test/scripts/gen.sh {{.TempRecordStreamsDir}} rcd_sig rcd 100 0.1 600 100"

  run:gen-events-streams: # for testing
    cmds:
      - "mkdir -p {{.TempEventsStreamsDir}}"
      - "test/scripts/gen.sh {{.TempEventsStreamsDir}} evts_sig rcd 100 0.1 300 100"

  run:cleanup-record-streams: # for testing
    cmds:
      - "mkdir -p {{.TempBackupRecordStreamsDir}}"
      - "./test/scripts/clean.sh {{.TempBackupRecordStreamsDir}} 10000 0.2"

  run:cleanup-events-streams: # for testing
    cmds:
      - "mkdir -p {{.TempBackupEventsStreamsDir}}"
      - "./test/scripts/clean.sh {{.TempBackupEventsStreamsDir}} 10000 0.2"

  build:cheetah:linux:amd64:
    env:
      GOOS: "linux"
      GOARCH: "amd64"
      BINARY_FILE_EXT: ""
    cmds:
      - "{{.BuildCommand}}"
    sources:
      - "**/*.go"
    generates:
      - "{{.OutputName}}"

  build:cheetah:linux:arm64:
    env:
      GOOS: "linux"
      GOARCH: "arm64"
      BINARY_FILE_EXT: ""
    cmds:
      - "{{.BuildCommand}}"
    sources:
      - "**/*.go"
    generates:
      - "{{.OutputName}}"

  build:cheetah:darwin:amd64:
    env:
      GOOS: "darwin"
      GOARCH: "amd64"
      BINARY_FILE_EXT: ""
    cmds:
      - "{{.BuildCommand}}"
    sources:
      - "**/*.go"
    generates:
      - "{{.OutputName}}"

  build:cheetah:darwin:arm64:
    env:
      GOOS: "darwin"
      GOARCH: "arm64"
      BINARY_FILE_EXT: ""
    cmds:
      - "{{.BuildCommand}}"
    sources:
      - "**/*.go"
    generates:
      - "{{.OutputName}}"

  build:permissions:
    cmds:
      - "chmod +x build/*"

  test:
    cmds:
      - task: "test:unit"

  test:unit:
    cmds:
      # Using go-testreport v0.3.2
      - "go install github.com/becheran/go-testreport@90efc1ce13c872f23d6bc8a069527c26288b8f9c"
      - "go test -race -cover -json ./internal/... ./pkg/... ./cmd/... | go-testreport -output unit-test-report.md -vars 'Title:Unit Test Report'"

  run:
    deps:
      - "run:cheetah"

  run:cheetah:
    deps:
      - "build"
    cmds:
      - "build/cheetah-{{OS}}-{{ARCH}}{{exeExt}} {{.CLI_ARGS}}"

  run:cheetah:skipdl:
    deps:
      - "build"
    env:
      CHEETAH_LOG_LEVEL: "Debug"
    cmds:
      - "build/cheetah-{{OS}}-{{ARCH}}{{exeExt}} {{.CLI_ARGS}}"

  install:go:
    deps:
      - "install:go:linux"


  install:go:linux:
    status:
      - "command -v go"
    platforms:
      - "linux/amd64"
      - "linux/arm64"
    cmds:
      - "curl -sSLO https://go.dev/dl/go{{.GoVersion}}.{{OS}}-{{ARCH}}.tar.gz"
      - "sudo mkdir -p /usr/local/go"
      - "sudo tar -C /usr/local -xzf go{{.GoVersion}}.{{OS}}-{{ARCH}}.tar.gz"
      - "rm -f go{{.GoVersion}}.{{OS}}-{{ARCH}}.tar.gz"
      - "echo 'PATH=\"${PATH}:/usr/local/go/bin\"' | sudo tee /etc/profile.d/go.sh >/dev/null 2>&1"
      - "source /etc/profile.d/go.sh"
    generates:
      - "/usr/local/go/**"
