version: 3
silent: false
output: prefixed
vars:
  OS: [ linux, darwin ]
  ARCH: [ amd64, arm64 ]
  GO_VERSION: 1.24.3
  LDFLAGS: "-w -s"
  TempDir: "/tmp/solo-cheetah"
  TempDataDir: "/tmp/solo-cheetah/data"
  TempBackupDir: "/tmp/solo-cheetah/data/backup"
  TempConfigDir: "/tmp/solo-cheetah/config"
  TempLogsDir: "/tmp/solo-cheetah/logs"
  TempStatsDir: "/tmp/solo-cheetah/stats"
  TempRecordStreamsDir: "/tmp/solo-cheetah/data/hgcapp/recordStreams"
  TempEventsStreamsDir: "/tmp/solo-cheetah/data/hgcapp/eventsStreams"
  TempBackupRecordStreamsDir: "/tmp/solo-cheetah/data/backup/recordStreams"
  TempBackupEventsStreamsDir: "/tmp/solo-cheetah/data/backup/eventsStreams"
env:
  SOLO_CLUSTER_NAME: "${SOLO_CLUSTER_NAME:-kind-solo}"
tasks:
  clean:
    cmds:
      - "rm -rf bin"
      - "rm -f unit-test-report.md"
      - "mkdir -p bin"
      - "go clean -cache -testcache"

  vendor:
    cmds:
      - "go mod vendor"

  lint:
    cmds:
      - "go fmt -x ./..."

  lint:check:
    cmds:
      - "R=$(go fmt ./...) && if [[ -n \"$R\" ]]; then echo \"The following files require formatting:\"; echo \"$R\"; exit 1; fi"

  build:
    deps:
      - "vendor"
    cmds:
      - task: "clean"
      - task: "generate"
      - task: "build:cheetah:all"
    sources:
      - "**/*.go"
    generates:
      - "bin/cheetah-linux-*"
      - "bin/cheetah-darwin-*"

  hash:
    deps:
      - "build"
    cmds:
      - task: "hash:cheetah:all"
    sources:
      - "bin/cheetah-linux-*"
      - "bin/cheetah-darwin-*"
    generates:
      - "bin/*.sha256"

  sign:
    deps:
      - "build"
    cmds:
      - task: "sign:cheetah:all"

  build:image:
    deps:
      - task: "hash"
    cmds:
      - "docker build -t solo-cheetah ."

  run:minio-local:
    cmds:
      - "docker run --rm -p 9000:9000 -p 9001:9001 --name minio -e \"MINIO_ROOT_USER=solo-cheetah\" -e \"MINIO_ROOT_PASSWORD=changeme\" minio/minio server /data --console-address :9001"

  run:image:
    cmds:
      - "mkdir -p {{.TempDir}}"
      - "mkdir -p {{.TempDataDir}}"
      - "mkdir -p {{.TempBackupDir}}"
      - "mkdir -p {{.TempConfigDir}}"
      - "mkdir -p {{.TempLogsDir}}"
      - "mkdir -p {{.TempStatsDir}}"
      - "mkdir -p {{.TempRecordStreamsDir}}"
      - "mkdir -p {{.TempEventsStreamsDir}}"
      - "time docker run -it \
      -v $(PWD)/test/config:/app/config \
      -v {{.TempDataDir}}:/app/data \
      -v {{.TempLogsDir}}:/app/logs \
      -v {{.TempStatsDir}}:/app/stats \
      -e S3_ACCESS_KEY=${S3_ACCESS_KEY} \
      -e S3_SECRET_KEY=${S3_SECRET_KEY} \
      -e GCS_ACCESS_KEY=${GCS_ACCESS_KEY} \
      -e GCS_SECRET_KEY=${GCS_SECRET_KEY} \
      -p 6060:6060 \
      solo-cheetah upload --config /app/config/.cheetah/cheetah-container.yaml"

  run:gen-record-streams: # for testing
    cmds:
      - "mkdir -p {{.TempRecordStreamsDir}}"
      - "test/scripts/gen.sh {{.TempRecordStreamsDir}} rcd_sig rcd.gz 100 0.1 3000 100" # 3000 * 100 * 2 = 600K files

  run:gen-events-streams: # for testing
    cmds:
      - "mkdir -p {{.TempEventsStreamsDir}}"
      - "test/scripts/gen.sh {{.TempEventsStreamsDir}} evts_sig evts 100 0.1 300 100"

  run:cleanup-record-streams: # for testing
    cmds:
      - "mkdir -p {{.TempBackupRecordStreamsDir}}"
      - "./test/scripts/clean.sh {{.TempBackupRecordStreamsDir}} 10000 0.2"

  run:cleanup-events-streams: # for testing
    cmds:
      - "mkdir -p {{.TempBackupEventsStreamsDir}}"
      - "./test/scripts/clean.sh {{.TempBackupEventsStreamsDir}} 10000 0.2"

  generate:
    cmds:
      - "go generate ./..."

  build:cheetah:all:
    desc: "Build the Cheetah daemon for all configured operating systems and architectures"
    cmds:
      - task: build:cheetah:all:os

  build:cheetah:all:os:
    internal: true
    desc: "Build the Cheetah daemon for all configured operating systems"
    cmds:
      - for:
          var: OS
        task: build:cheetah:all:arch
        vars:
          GOOS: "{{.ITEM}}"

  build:cheetah:all:arch:
    internal: true
    desc: "Build the Cheetah daemon for all configured architectures"
    cmds:
      - for:
          var: ARCH
        task: build:cheetah
        vars:
          GOOS: "{{.GOOS}}"
          GOARCH: "{{.ITEM}}"

  build:cheetah:
    internal: true
    desc: "Build the Cheetah daemon for the specified operating system and architecture"
    env:
      GOOS: "{{coalesce .GOOS OS}}"
      GOARCH: "{{coalesce .GOARCH ARCH}}"
    cmds:
      - cmd: go build -ldflags='{{.LDFLAGS}}' -trimpath -o bin/cheetah-{{coalesce .GOOS OS}}-{{coalesce .GOARCH ARCH}} ./cmd/cheetah
      - cmd: chmod +x bin/cheetah-{{coalesce .GOOS OS}}-{{coalesce .GOARCH ARCH}}

  hash:cheetah:all:
    desc: "Hash the Cheetah daemon binaries for all configured operating systems and architectures"
    cmds:
      - task: hash:cheetah:all:os

  hash:cheetah:all:os:
    internal: true
    desc: "Hash the Cheetah daemon binaries for all configured operating systems"
    cmds:
      - for:
          var: OS
        task: hash:cheetah:all:arch
        vars:
          GOOS: "{{.ITEM}}"

  hash:cheetah:all:arch:
    internal: true
    desc: "Hash the Cheetah daemon binaries for all configured architectures"
    cmds:
      - for:
          var: ARCH
        task: hash:cheetah
        vars:
          GOOS: "{{.GOOS}}"
          GOARCH: "{{.ITEM}}"

  hash:cheetah:
    internal: true
    desc: "Hash the Cheetah daemon binaries for the specified operating system and architecture"
    dir: bin
    cmds:
      - cmd: sha256sum cheetah-{{.GOOS}}-{{.GOARCH}} > cheetah-{{.GOOS}}-{{.GOARCH}}.sha256

  sign:cheetah:all:
    desc: "Sign the Cheetah daemon binaries for all configured operating systems and architectures"
    cmds:
      - task: sign:cheetah:all:os

  sign:cheetah:all:os:
    internal: true
    desc: "Sign the Cheetah daemon binaries for all configured operating systems"
    cmds:
      - for:
          var: OS
        task: sign:cheetah:all:arch
        vars:
          GOOS: "{{.ITEM}}"

  sign:cheetah:all:arch:
    internal: true
    desc: "Sign the Cheetah daemon binaries for all configured architectures"
    cmds:
      - for:
          var: ARCH
        task: sign:cheetah
        vars:
          GOOS: "{{.GOOS}}"
          GOARCH: "{{.ITEM}}"

  sign:cheetah:
    internal: true
    desc: "Sign the Cheetah daemon binaries for the specified operating system and architecture"
    env:
      GOOS: "{{coalesce .GOOS OS}}"
      GOARCH: "{{coalesce .GOARCH ARCH}}"
    cmds:
      - task: hash:cheetah
        vars:
          GOOS: "{{.GOOS}}"
          GOARCH: "{{.GOARCH}}"
      - cmd: gpg --batch --yes --armor --output bin/cheetah-{{.GOOS}}-{{.GOARCH}}.sha256.asc --detach-sign bin/cheetah-{{.GOOS}}-{{.GOARCH}}.sha256
      - cmd: gpg --batch --yes --armor --output bin/cheetah-{{.GOOS}}-{{.GOARCH}}.asc --detach-sign bin/cheetah-{{.GOOS}}-{{.GOARCH}}

  test:
    cmds:
      - task: "test:unit"

  test:unit:
    deps:
      - "generate"
    cmds:
      # Using go-testreport v0.3.2
      - "go install github.com/becheran/go-testreport@90efc1ce13c872f23d6bc8a069527c26288b8f9c"
      - "go test -race -cover -json ./internal/... ./pkg/... ./cmd/... | go-testreport -output unit-test-report.md -vars 'Title:Unit Test Report'"

  test:coverage:
    cmds:
      - "go install github.com/vladopajic/go-test-coverage/v2@7003e902e787e60375e1ce3ae5b85b19313dbff2"
      - "go test -race -cover -json ./internal/... ./pkg/... ./cmd/... -coverprofile=./cover.out -covermode=atomic -coverpkg=./..."
      - "go-test-coverage --config=./.testcoverage.yml"


  run:
    deps:
      - "run:cheetah"

  run:cheetah:
    deps:
      - "build"
    cmds:
      - "bin/cheetah-{{OS}}-{{ARCH}}{{exeExt}} {{.CLI_ARGS}}"

  run:cheetah:skipdl:
    deps:
      - "build"
    env:
      CHEETAH_LOG_LEVEL: "Debug"
    cmds:
      - "bin/cheetah-{{OS}}-{{ARCH}}{{exeExt}} {{.CLI_ARGS}}"

  install:go:
    deps:
      - "install:go:linux"

  install:go:linux:
    internal: true
    status:
      - "command -v go"
    platforms:
      - "linux/amd64"
      - "linux/arm64"
    cmds:
      - "curl -sSLO https://go.dev/dl/go{{.GO_VERSION}}.{{OS}}-{{ARCH}}.tar.gz"
      - "sudo mkdir -p /usr/local/go"
      - "sudo tar -C /usr/local -xzf go{{.GO_VERSION}}.{{OS}}-{{ARCH}}.tar.gz"
      - "rm -f go{{.GO_VERSION}}.{{OS}}-{{ARCH}}.tar.gz"
      - "echo 'PATH=\"${PATH}:/usr/local/go/bin\"' | sudo tee /etc/profile.d/go.sh >/dev/null 2>&1"
      - "source /etc/profile.d/go.sh"
    generates:
      - "/usr/local/go/**"

  # Install the Cheetah Docker image into a Kind cluster for local development and testing rather than pulling from a registry.
  # We need to update the image tag to 'local' in the solo-charts to avoid pulling from the registry.
  load:
    cmds:
      - "docker tag solo-cheetah ghcr.io/hashgraph/solo-cheetah/cheetah:local"
      - "kind load docker-image ghcr.io/hashgraph/solo-cheetah/cheetah:local -n {{.SOLO_CLUSTER_NAME}}"
